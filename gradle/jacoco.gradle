// In here we can filter out what modules that we want to cover
def coveredProject = subprojects

// configure() method takes a list as an argument and applies the configuration to the projects in this list.
configure(coveredProject) { prj ->

    // Here we apply jacoco plugin to every project
    apply plugin: 'jacoco'

    // Set Jacoco version
    jacoco {
        toolVersion = "0.8.7"
    }

    // Here we create the task to generate Jacoco report
    // It depends to unit test task we don't have to manually running unit test before the task
    task jacocoReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

        // Define what type of report we should generate
        // If we don't want to process the data further, html should be enough
      reports {
            csv {
                enabled false
            }
            xml {
                enabled true
            }
            html {
                enabled true
            }
        }

        // Setup the .class, source, and execution directories
        final fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']

        // Include this if you use Kotlin
        final javacTree = fileTree(dir: "${prj.buildDir}/intermediates/javac/debug", excludes: fileFilter)
        final mainSrc = "${prj.projectDir}/src/main/java"

        sourceDirectories.setFrom files([mainSrc])
        classDirectories.setFrom files([javacTree])
        executionData.setFrom fileTree(dir: prj.buildDir, includes: [
                'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
        ])
    }
}

task jacocoTestReport(type: JacocoReport, group: 'Coverage reports') {
    def projects = coveredProject

    // Here we depend on the jacocoReport task that we created before
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/test/html')
         }
        csv {
            enabled true
            destination file('build/reports/jacoco/test/jacocoTestReport.xml')
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData.setFrom files(executionData.findAll { it.exists() })
    }
}
