
pipeline {
    //agent any
    agent {label 'principal'}

    parameters {
            choice(name: 'ENV_TYPE', choices: ['alpha', 'beta', 'production' ], description: 'Canal de despliegue')
            string(name: 'BRANCH_TO_DEPLOY', defaultValue: "develop", description: 'GIT branch to deploy')
            string(name: 'RELEASE_DESCRIPTION', defaultValue: "", description: 'Descripcion para la etiqueta (sin version ni fecha), si no pones nada la etiqueta tendrá el formato v1.0.0_yyyymmdd')
    }

    environment {
        PROJECT_NAME = 'FRMDRD'
        //GIT_URL = "https://servicios.itacyl.es/gitea/ITACyL/${PROJECT_NAME}.git"
        GIT_URL = "git@itaul4622:ITACyL/${PROJECT_NAME}.git"
        GITHUB_CREDENTIALS = credentials('github-credentials')
    }

    stages {

        stage("Clone sources"){
                    steps {
                        echo "Clonando repositorio ${GIT_URL} rama ${params.BRANCH_TO_DEPLOY}"
                        git branch: "${params.BRANCH_TO_DEPLOY}", credentialsId: 'jenkins-gitea-user', url: "${GIT_URL}"
                    }
                }

                stage("Generate Release Tag") {
                            steps {
                                script {
                                    def now = new Date()
                                    def version_value = sh(returnStdout: true, script: "cat build.gradle | grep -o 'versionName = [^,]*'").trim()
                                    sh "echo Project in version value: $version_value"
                                    def VERSION = version_value.split(/=/)[1].trim().replaceAll("'", "")
                                    sh "echo final version: VERSION"
                                    def TIMESTAMP = now.format("yyyyMMdd")
                                    def DESC = ""
                                    if (params.RELEASE_DESCRIPTION) {
                                        DESC = "_${params.RELEASE_DESCRIPTION}".replaceAll(" ", "_")
                                    }
                                    def ENV = ""
                                    if (params.ENV_TYPE != 'production') {
                                        ENV = "_${params.ENV_TYPE}"
                                    }
                                    env.RELEASE_TAG = "v${VERSION}_${TIMESTAMP}${DESC}${ENV}"
                                    echo "Generated RELEASE_TAG: ${env.RELEASE_TAG}"
                                }
                            }
                        }


            stage("Merge, tag and push to master (Gitea)") {
                steps {
                    echo "The environment is ${params.ENV_TYPE}"
                    echo "Using RELEASE_TAG: ${env.RELEASE_TAG}"
                    sshagent(['jenkins_ssh']) {
                        sh("git config user.name 'jenkins'")
                        sh("git config user.email 'jenkins@itacyl.es'")

                        sh("git stash")
                        sh("git checkout master")
                        sh("git fetch")
                        sh("git reset --hard origin/master")

                        script {
                            def existsTag = sh(script: "git ls-remote --tags | grep ${env.RELEASE_TAG} | wc -l", returnStdout: true).trim()
                            if ("${existsTag}" == "1") {
                                echo "Eliminando etiqueta ${env.RELEASE_TAG}"
                                sh("git tag -d ${env.RELEASE_TAG}")
                                sh("git push --delete origin ${env.RELEASE_TAG}")
                            }
                        }

                        sh("git merge ${params.BRANCH_TO_DEPLOY}")
                        sh("git tag -fa ${env.RELEASE_TAG} -m '${params.RELEASE_DESCRIPTION}'")
                        sh("git push --tags origin master")
                    }
                }
            }

           stage("Push to GitHub") {
              steps {
                  echo "Pushing to GitHub"
                  echo "Using RELEASE_TAG: ${env.RELEASE_TAG}"
                   withCredentials([GITHUB_CREDENTIALS]) {
                      sh("git remote add github https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@github.com/itacyldev/formulio.git")
                      sh("git checkout master") // Asegúrate de estar en la rama master
                      script {
                          def existsTag = sh(script: "git ls-remote --tags github | grep ${env.RELEASE_TAG} | wc -l", returnStdout: true).trim()
                          if ("${existsTag}" == "1") {
                              echo "Eliminando etiqueta en GitHub: ${env.RELEASE_TAG}"
                              sh("git tag -d ${env.RELEASE_TAG}")
                              sh("git push --delete github ${env.RELEASE_TAG}")
                          }
                      }
                      sh("git tag -fa ${env.RELEASE_TAG} -m '${params.RELEASE_DESCRIPTION}'")
                      sh("git push github master --tags")
                  }
              }
          }


         stage('Setup Tools') {
            steps{
                script {
                    withCredentials([file(credentialsId: 'android_keystore', variable: 'KEYFILE')]) {
                        sh "cp \$KEYFILE app/keystore"
                    }
                }
            }
        }

         stage("Build Apk") {
            steps{
                script {
                    withCredentials([file(credentialsId: 'android_keystore', variable: 'KEYFILE')]) {
                        sh """
                            chmod +x gradlew
                            ./gradlew clean bundleRelease
                        """
                    }
                }
            }
        }


         //stage('Upload to Play Store') {
         //   steps{
                // Archive the AABs so that they can be downloaded from Jenkins
         //       archiveArtifacts '**/build/outputs/**/*.aab'

                // Upload the AAB to Google Play
         //       androidApkUpload googleCredentialsId: 'Google Play Key',
         //       apkFilesPattern: '**/build/outputs/**/*.aab', trackName:
         //       "${params.ENV_TYPE}",  rolloutPercentage: '100'
         //   }
        //}

   }
    //post {
        //failure {
        //    emailext body: '''${SCRIPT, template="groovy-html.template"}''',
        //    recipientProviders: [culprits()],
        //    subject: "Build failed in jenkins: ${env.JOB_NAME} ${env.BUILD_NUMBER}",
        //    mimeType: 'text/html'
       // }
    //}
}