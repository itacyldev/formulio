// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply plugin: 'jacoco'
apply plugin: "org.sonarqube"

buildscript {
    repositories {
        flatDir {
            dirs 'libs'
        }
        google()
        jcenter()
        maven {
            url 'https://maven.google.com'
        }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.0'
        classpath 'org.codehaus.groovy:groovy-android-gradle-plugin:2.0.0'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1'
        classpath 'org.jacoco:org.jacoco.core:0.8.6'
    }
}


allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
        maven {
            url 'https://maven.google.com'
        }
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                //options.compilerArgs << "-Xlint:deprecation,unchecked"
                sourceCompatibility = 1.8
                targetCompatibility = 1.8
            }
        }
        def androidHome = System.getenv("ANDROID_HOME")
        maven {
            name "sdk android extras"
            url "$androidHome/extras/android/m2repository/"
        }
        maven {
            name "sdk google extras"
            url "$androidHome/extras/google/m2repository/"
        }

        maven {
            name "ITACyL - snapshots"
            url "http://repo.itacyl.es/archiva/repository/snapshots/"
        }
        maven {
            name "ITACyL - internal"
            url "http://repo.itacyl.es/archiva/repository/internal/"
        }
        maven {
            name "ITACyL - thirdparty"
            url "http://repo.itacyl.es/archiva/repository/thirdparty/"
        }
    }

    configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.name == 'xpp3_min') {
                details.useTarget group: details.requested.group, name: 'xpp3', version: details.requested.version
                details.because "Se prefiere 'xpp3' que es una version completa de 'xpp3_min'"
            }
            if (details.requested.group == "androidx") {
                if (!details.requested.name.startsWith("multidex")) {
                    details.useVersion "${ext.targetSdkVersion}.+"
                }
            }
        }
    }
}

def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/jsqlite/**/*.*']

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include('**/build/jacoco/*.exec')

    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/html")
    }


    def coverageMainSrc = ["${rootDir}/app/src/main/java",
                           "${rootDir}/forms/src/main/java"
                           //,"${rootDir}/repo/src/main/java"
    ]

    def coverageDebugTree = [fileTree(dir: "${rootDir}/app/build/intermediates/javac/debug/classes", excludes: fileFilter),
                             fileTree(dir: "${rootDir}/forms/build/intermediates/javac/debug/classes", excludes: fileFilter)
                             //,fileTree(dir: "${rootDir}/repo/build/intermediates/javac/debug/classes", excludes: fileFilter)
    ]

    getSourceDirectories().setFrom(files(coverageMainSrc))
    getClassDirectories().setFrom(files(coverageDebugTree))
    //getExecutionData().setFrom(files(["app/build/jacoco/testDebugUnitTest.exec",
      //                                "forms/build/jacoco/testDebugUnitTest.exec"
}

sonarqube {
    properties {
        property "sonar.projectKey", "FRMDRD"
        property "sonar.login", "d247ac449f25eb8e8852380dabf101956f1d1a1b"
        property "sonar.projectName", "Formic"
        property 'sonar.host.url', "https://servicios.itacyl.es/sonarqube"
        property 'sonar.java.coveragePlugin', "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${rootDir}/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.test.inclusions", "**/*Test*/**"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", fileFilter
    }
}


task clean(type: Delete) {
    delete rootProject.buildDir
}


ext {

    versionCode = 32
    versionName = '0.6.10'
    applicationId = "es.jcyl.ita.formic"
    compileSdkVersion = 30
    targetSdkVersion = 30
    minSdkVersion = 21
    buildToolsVersion = '30.0.2'
    encoding = "UTF-8"

    group = 'es.jcyl.ita.formic'
    version = '0.6.10'
    artifactId = 'Formic'

    sharedDeps = [
            'org.apache.commons:commons-jexl3:3.1',
            'org.apache.commons:commons-lang3:3.6',
            'org.apache.commons:commons-text:1.8',
            'commons-logging:commons-logging:1.2',
    ]
    unitTestDeps = [
            'junit:junit:4.12',
            'androidx.test.espresso:espresso-core:3.2.0',
            'androidx.test.espresso:espresso-contrib:3.2.0',
            'androidx.test.espresso:espresso-accessibility:3.2.0',
            'org.robolectric:robolectric:4.2',
            'org.mini2Dx:android-beans:1.0.0',
            'org.mockito:mockito-core:2.28.2',
            'org.hamcrest:hamcrest:2.2',
    ]
}